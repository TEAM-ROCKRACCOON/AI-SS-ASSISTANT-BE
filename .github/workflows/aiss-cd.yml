name: ⚙️ AI-SS-DEV-DEPLOY
on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Sanity check required secrets
        run: |
          test -n "${{ secrets.AWS_ACCESS_ID }}"   || (echo "❌ AWS_ACCESS_ID missing"; exit 1)
          test -n "${{ secrets.AWS_SECRET_KEY }}"  || (echo "❌ AWS_SECRET_KEY missing"; exit 1)
          test -n "${{ secrets.AWS_ACCOUNT_ID }}"  || (echo "❌ AWS_ACCOUNT_ID missing"; exit 1)
          test -n "${{ secrets.ECR_APP_NAME }}"    || (echo "❌ ECR_APP_NAME missing"; exit 1)

      - name: Derive env
        run: |
          echo "AWS_REGION=ap-northeast-2" >> $GITHUB_ENV
          echo "ECR_REPO_NAME=${{ secrets.ECR_APP_NAME }}-dev" >> $GITHUB_ENV
          echo "ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
          echo "APP_ECR_REPO=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com/${{ secrets.ECR_APP_NAME }}-dev" >> $GITHUB_ENV
          echo "SECRET_ID=aiss/dev" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Ensure Private ECR exists
        run: |
          aws ecr describe-repositories --repository-names "${ECR_REPO_NAME}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${ECR_REPO_NAME}" >/dev/null

      # gradle 로컬 빌드는 멀티스테이지가 대신하므로 불필요

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin $APP_ECR_REPO

      - name: Compute image tags
        id: meta
        run: |
          SHA=$(echo "${GITHUB_SHA}" | cut -c1-12)
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"

      - name: Docker Build & Push
        run: |
          docker build -t $APP_ECR_REPO:dev-${{ steps.meta.outputs.sha }} -t $APP_ECR_REPO:latest-dev .
          docker push $APP_ECR_REPO:dev-${{ steps.meta.outputs.sha }}
          docker push $APP_ECR_REPO:latest-dev

      - name: Materialize application-dev.yml from secret
        env:
          APP_DEV_YML: ${{ secrets.APPLICATION_DEV_YML }}
        run: |
          printf '%s' "$APP_DEV_YML" > application-dev.yml

      - name: Upsert application-dev.yml into Secrets Manager
        run: |
          if aws secretsmanager describe-secret --secret-id "${SECRET_ID}" >/dev/null 2>&1; then
            aws secretsmanager put-secret-value --secret-id "${SECRET_ID}" --secret-string file://application-dev.yml >/dev/null
            echo "🔁 Updated secret ${SECRET_ID}"
          else
            aws secretsmanager create-secret --name "${SECRET_ID}" --secret-string file://application-dev.yml >/dev/null
            echo "🆕 Created secret ${SECRET_ID}"
          fi

      - name: Write docker-compose.yml from secret
        env:
          DOCKER_COMPOSE_DEV_YML: ${{ secrets.DOCKER_COMPOSE_DEV_YML }}
        run: |
          printf '%s' "$DOCKER_COMPOSE_DEV_YML" > docker-compose.yml

      - name: Upload compose & scripts to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEV_SERVER_IP }}
          username: ubuntu
          key: ${{ secrets.DEV_PEM_KEY }}
          source: |
            docker-compose.yml
            script/**
          target: /home/ubuntu/app/
          overwrite: true

      - name: Run deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEV_SERVER_IP }}
          username: ubuntu
          key: ${{ secrets.DEV_PEM_KEY }}
          script: |
            cd /home/ubuntu/app
            echo "APP_ECR_REPO=${{ env.APP_ECR_REPO }}" > .env
            echo "IMAGE_TAG=dev-${{ steps.meta.outputs.sha }}" >> .env
            echo "AWS_REGION=${{ env.AWS_REGION }}" >> .env
            chmod 600 .env
            chmod +x ./script/deploy.sh
            ./script/deploy.sh

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          jq --version

      - name: Keep last 10 dev tags
        run: |
          KEEP=10
          TAGS=$(aws ecr describe-images --repository-name "$ECR_REPO_NAME" \
            --query 'sort_by(imageDetails,& imagePushedAt)[].imageTags' --output json | jq -r '.[]? | .[]?' | grep '^dev-' || true)
          COUNT=$(echo "$TAGS" | wc -l | tr -d ' ')
          if [ "$COUNT" -gt "$KEEP" ]; then
            DEL=$(echo "$TAGS" | head -n $((COUNT-KEEP)) | sed 's/^/tag=/g' | tr '\n' ' ')
            aws ecr batch-delete-image --repository-name "$ECR_REPO_NAME" --image-ids $DEL || true
          fi
